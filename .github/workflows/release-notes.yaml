name: Generate Release Notes

on:
  release:
    types: [published]

jobs:
  generate_release_notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required to get all commits

      - name: Generate Release Notes
        id: release_notes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const tag = context.payload.release.tag_name;

            const previousRelease = await github.rest.repos.getLatestRelease({
              owner,
              repo,
            }).catch(() => null);

            let previousTag = '';
            if (previousRelease) {
              previousTag = previousRelease.data.tag_name;
            } else {
              // If no previous release, use the first commit as the base for the comparison.
              const firstCommit = await github.rest.repos.listCommits({
                owner,
                repo,
                per_page: 1,
                direction: 'ascending',
              });
              if (firstCommit.data.length > 0) {
                previousTag = firstCommit.data[0].sha;
              } else {
                return 'No commits found.';
              }
            }

            const compare = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: previousTag,
              head: tag,
            });

            if (compare.data.commits.length === 0) {
              return 'No changes since the previous release.';
            }

            const commitMessages = compare.data.commits.map(commit => {
              const message = commit.commit.message.split('\n')[0]; // Get only the first line of the commit message.
              const author = commit.commit.author.name;
              const sha = commit.sha.substring(0, 7);
              return `- ${message} (${sha}) by @${author}`;
            }).join('\n');

            return commitMessages;

      - name: Update Release Notes
        uses: actions/github-script@v6
        if: ${{ steps.release_notes.outputs.result }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const releaseId = context.payload.release.id;
            const releaseNotes = `${{ steps.release_notes.outputs.result }}`;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: releaseId,
              body: releaseNotes
            });